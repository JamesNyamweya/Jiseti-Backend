"""Add geolocation and updated category validation

Revision ID: ac802c7cf908
Revises: a70ff004d55c
Create Date: 2025-07-19 12:33:29.374748

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ac802c7cf908'
down_revision = 'a70ff004d55c'
branch_labels = None
depends_on = None


def upgrade():
    # Create the enum types first
    priority_enum = postgresql.ENUM('medium', 'high', 'urgent', name='priority_enum')
    priority_enum.create(op.get_bind(), checkfirst=True)
    
    title_enum = postgresql.ENUM('Red-Flag', 'Intervention', name='title_enum')
    title_enum.create(op.get_bind(), checkfirst=True)

    status_enum = postgresql.ENUM('under investigation', 'resolved', 'rejected', name='status_enum')
    status_enum.create(op.get_bind(), checkfirst=True)
    
    role_enum = postgresql.ENUM('admin', 'user', name='role_enum')
    role_enum.create(op.get_bind(), checkfirst=True)

    # REMOVED: op.execute('ALTER TABLE records ALTER COLUMN title TYPE title_enum USING title::title_enum')
    # This will be handled by the batch operation below

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.alter_column('message',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=False)
        batch_op.alter_column('record_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('records', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('priority', sa.Enum('medium', 'high', 'urgent', name='priority_enum'), nullable=False))
        batch_op.add_column(sa.Column('latitude', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('longitude', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('location_address', sa.String(length=250), nullable=True))
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=180),
               type_=sa.Enum('Red-Flag', 'Intervention', name='title_enum'),
               existing_nullable=False,
               postgresql_using='title::title_enum')  # Add the USING clause here
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('under investigation', 'resolved', 'rejected', name='status_enum'),
               existing_nullable=False,
               postgresql_using='status::status_enum')  # Add USING clause here too

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('first_name',
               existing_type=sa.VARCHAR(length=15),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('last_name',
               existing_type=sa.VARCHAR(length=15),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('admin', 'user', name='role_enum'),
               nullable=False,
               postgresql_using='role::role_enum')  # Add USING clause here too

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=sa.Enum('admin', 'user', name='role_enum'),
               type_=sa.VARCHAR(),
               nullable=True)
        batch_op.alter_column('last_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=15),
               existing_nullable=False)
        batch_op.alter_column('first_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=15),
               existing_nullable=False)

    with op.batch_alter_table('records', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.Enum('under investigation', 'resolved', 'rejected', name='status_enum'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('title',
               existing_type=sa.Enum('Red-Flag', 'Intervention', name='title_enum'),
               type_=sa.VARCHAR(length=180),
               existing_nullable=False)
        batch_op.drop_column('location_address')
        batch_op.drop_column('longitude')
        batch_op.drop_column('latitude')
        batch_op.drop_column('priority')
        batch_op.drop_column('category')

    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.alter_column('record_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('message',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=False)

    # ### end Alembic commands ###
    
    # Drop the enum types in reverse order
    role_enum = postgresql.ENUM('admin', 'user', name='role_enum')
    role_enum.drop(op.get_bind(), checkfirst=True)
    
    status_enum = postgresql.ENUM('under investigation', 'resolved', 'rejected', name='status_enum')
    status_enum.drop(op.get_bind(), checkfirst=True)
    
    title_enum = postgresql.ENUM('Red-Flag', 'Intervention', name='title_enum')
    title_enum.drop(op.get_bind(), checkfirst=True)
    
    priority_enum = postgresql.ENUM('medium', 'high', 'urgent', name='priority_enum')
    priority_enum.drop(op.get_bind(), checkfirst=True)